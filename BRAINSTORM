
I see what to do:
  - Make every attribute in a Character Sheet into its own small class.
    This turns the create_character() routine into a series of class
    calls. In fact, you could put the class objects in a list and
    call every element of a list.
  - Then each class has a random() call, so random generation does
    the same thing only it calls random instead and fetches
    an immediate result.
  - also, can add c) random choice to char generation, which merely calls the random() method instead
  - Melee algorithm takes a shortened representation of the full
    character class. Just the:  Name, Attributes, HP, & Weapon
    We pass these blobs to the melee class. Each ShortChar() obj
    is a member of a group. There can be from 2-N groups.  At first
    we ignore distance to calculate who goes after who.
  - need method that generates ShortChar object from Character
  - need algorithm to determine who engages whom. Therefore this
    engagement determinator can be replaced/upgraded later. Distance added as factor, etc.
  - follow the AD&D-1e algorithm pre Unearthed Arcana.

-------------------------------------------------------

ynq() - q will always exit sub-routine
ynq() - should usually only be used at the top of the question currently being asked.
        Internal logic to that question should use yn()

* Attributes roll gets this logic correct

-------------------------------------------------------

LOGIC:
    I just realized a maxim for UI design here:
The ynq() questions must always function the same way. That is:
the 'q' result must always exit the current sub-routine and shoot
back to the parent sub-routine.  In the character creation flow
this is not consistent.
    - City is broken, in one part you answer "keep this?" with No,
and it finishes keeping the result.

These loops are very difficult. The code is easy, its getting the flow
correct.  There must be better ways to abstract it out, such as using
a macro-language, and generating the code-flow, so that you can write
the exact logic flow through macros in plain-text, instead of Python.

But then the question is: How big of a win is this? If it takes 150 hours
just to get working, when you could've spent 15 hours to polish it in its
current state?

But the goals are: the more reuse we can get out of it the better. This
thing is utterly dedicated to one system, one flow only. It's great
practice to get started, but it ends with this 1e system. What about Goodman
Games DCRPG, OSR systems, something else like that?  What about 0e?
It would be more fun to do all of those. Ideally it would be macroized,
so that a core library governed the flow, and read in macro-files to determine
what to do, how to work. Then secondly, an additional app could run melee.
This is the gold-standard. If I could write the 1e melee algorithm for 2-N
participants, Holy Fuck, that would be awesome. It really would take
this whole thing to a much higher level.  You could start a cottage industry
online, just modifying and working on it every day. Maybe even make a living
through Paypal/Patreon?...

Another thing to consider: What about doing it in C/C++?  It woudl take
me a couple weeks to flush out the boilerplate methods, but it would give you
finer control over just about everything. Also, I can use ncurses which is
just better.

--------------------------------------------------------------------

-------------------
 TODO (in order)
-------------------
    X need manual age entry
    - in character creation, the SubMenu sections need a confirmation, eg. Class is Fighter, keep? [Y/n/q]
    - finish equipment list
    - enter all the spells, titles only
    - finish character creation
    - handle screen size and multiple pages
    - finish the character sheet printout to include all the stuff, and be formatted well
    - add DMG magic items

- edit character
- look at different presentation/SDK/toolkit: [ Qt, TclTk, Gtk, Curses ]
- automatic character generator
    - super large list of medieval names
- adapt for DCC
- (should be working on a Module for DCC, and submit to Joseph Goodman)
-----------------------------------------------------------------------------

- After players choose their basic attributes,
- they go to the PHB store, wherein they can aquire basic equipment.
- Armor Class is always computed automatically.
    that is, any-time an equipping action takes place, AC is
    recomputed by looping through inventory, and summing in AC modifiers
    for every item that has one (or is of type Armor)
- this means that all Armor, and Weapons sub-class class Item,
    we do this to impose a degree of uniformity on all the sub-classes.
- AC is stored in positive numbers, weapons are AC:0, as adding 0, does not
    change armor class. Platemail, which is AC-type 2, is {AC:8}, as you
    would subtract 8 from 10, to get 2.

------------------------------------------------------------------
Thinking ahead, we need to abstract everything into the right
    segments. There is a TON of meta-data, more than I had suspected.
    Basically, the data-segment is 3/4ths of the size of this project:
    that is, putting PHB, DMG, and maybe even MM, into JSON format.
    the other 1/3rd are the scripts to operate on this data.
    how else is this code going to be used?

    - Possible Tkl/TK or QT UI
    - possible Curses UI

    The thinking is that 70%+ of folks that might use this will be on Windoze,
    so we need to always be thinking in this direction. doing it commandline
    first is fine. But the commandline stuff should call API stuff, and as
    much of the decision making as possible should be put into the API, so
    that 90% of the commandline stuff merely deals with COmmandline and
    program flow only.  All of the actual DUNGEONS & DRAGONS should be
    in the API.

    Secondly, I am going to, legal or not, start by doing the Canonical books.
    But this means that I need to plan ahead for OSRIC or ADD replacements.

    3rd, I need to plan ahead for rules replacements, eg. Swords & Wizardry,
    Labrynth Lord, and DCC.  If I can accomodate these, then I have got a
    tool that might develop a pretty large usership.

- possible Curses UI
- possible Tcl/Tk or QT ui
- possible drop-in rules replacements: OSRIC, ADD, S&W, LL, DCC

- Design Pattern: Model-View-Controller. Model is just JSON, so that leaves
    us with VIEW and CONTROLLER, but V+C both fall into the view-sdk code,
    which means that there is: View+Controller+APILibrary separation.

MY_ULTIMATE_GOAL:
    - to make a game that could take user-generated Grid-maps, with Room-Keys,
        and custom roll-tables, all as META_DATA, be read in and generate
        a lo-fi gaming experience, that can play according to a number of
        drop-in rulesets, typically of these classic RPGs.

=============================================================================
CODE
=============================================================================

- need class/method that takes a LIST as an input,
    and returns a string as a result, then runs the UI INPUT as a little
    sub-routine nugglet

    eg. className = SubMenu( classes )
    def SubMenu():
        """does all the stuff that my interactive menus do,
        - print an arbitrarily lenth table of options in order, with integer
            indexes
        - prints, e) exit menu, q) quit to main, c) custom input
        - print a 'prompt> '
        - gets input, checks for int or option, loops until exit cond
            is met, returns string and exits
        - enums, so the caller knows if it is supposed to return
        - handles different behaviors, so that all the character class
            eventualities are handled
        - takes 'random=1', so that prompt is skipped and random number
            is selected
        - can be reused in CREATOR, EDITOR, AUTO-GENERATOR

- dice roll handles '-', '+', '*', '/', and arbitrary length, so,
    "4d6 + 1d20/7",
    - needs knowledge of operator precedence



-----------------------
EXE NAMES?
-----------------------
    chartool
    onee
    firsted
    oe
    fect - first edition character tool
    feck - first edition character keeper
    fecm - first edition character manager
    cmfe - character manager for first edition
    fednd
    dnd - ha!
    dndfecm -

-----------------------
TOOL_AND_FUNCTIONALITY
-----------------------
- command line tool         take startup and config from rsstool

- ability to ROLL a character for you
    - with ability to store and manage different DICE ROLLING strategies
        - see Earthlink doc, Ken's House Rules, ...
        n enter your one using script, eg. "4d6 drop lowest"... too hard

- Ability to roll dice yourself and manually enter the final attribs
- ability to edit attribs at any time
- ability to edit everything
- ability to keep an Adventure Log, storing entry by entry
- computes all the to-hit bonuses, saving throws, ...
- manage inventory
- print short stats
- print long stats
- equip inventory, compute bonuses
- manage spells (canon)
- manage custom entered spells


- list characters
- select character
- interactive mode
- edit attributes & scores, with quickest possible i/o interface (least number key strokes)
- print help

- age, height, hair color, race, class,

-----------------------
TECH
-----------------------
- rapid_json
- write Mongo Frontend for rapid_json, something that takes NOSQL queries and returns JSON ARRAY of OBJECTS
    with the same syntax support as Queryable

- OR, is there a NoSQlite project that reads/writes database as a local text file ? (there has to be)


--------------------------------------------------------------------------------
THOUGHTS

It's too hard. if you limit the scope to just entering abilities, and then having
it computing your modified to-hit bonuses and saving throw bonuses for you, thta's not
too bad. It's finite enough that I might be able to finish it, but getting into logs,
spells, races, ... it just goes on and on, not to mention all the programming overhead,
time spent coding when I could be doing something else.


